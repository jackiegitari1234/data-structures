https://www.bigocheatsheet.com/
BIG O
compare codes
1st rule of simplification - drop constants
2nd rule of simplification - drop non dominants

space complexity
memory

time complexity
- not time, no of operations per seconds
omega - Ω - best case
Theta - θ - average case
Omicron, big O - 0 - worst case


O(1)
constant time
most efficient

Olog(n)
find an item in a sorted array
next best thing to O(1)
divide and conquer

O(n)
straight line, proportional
print items in a list, two loops of similar input
two loops of different input - O(a+b)

O(n^2) squared - n*n, less efficient
for loop inside another with one input
two loops of different input - O(a*b)


Arraylist
add item at end-  O(1)
remove item at end -  O(1)
add item at beginning,or other positions-  O(n)
remove item at beginning,or other position -  O(n)
look for item by value - O(n)
look for item by index - O(1)

pointers
hashmap - retain pointers

HashMap
does not allow duplicate keys, but duplicate values can be added to it.

Node
the value
the pointer

LinkedList - head, tail, length
-Dynamic in length
-No indexes
-Items are spread-out, not in a continuous length

Singly linked list
-Has head tail and length
-has ahead and a tail, these are pointers to nodes
-A node here has value and next node pointer
-Each node has next pointers, except the last
-Remove last, HAVE to go through all items to access item b4 tail


Doubly linked list
-head tail and length
-A node here has value, NEXT node pointer and PREV node pointer
-Remove last - don't have go through all the items, tail.prev
-get item, user can access items from tail...tail

Stack
-LIFO, web pages
-top, HEIGHT. Everything works from the top
- push
- pop

Queue
-first, last, length
FIFO
Enqueue
Dequeue

TREE
-parent & child nodes, sibling
-a node has only one parent
a leaf- child without children
-Linked list is a tree that does not fork
-Has left and right pointers, binary tree
-Full tree, all nodes point to two or zero nodes
-Perfect tree , filled all way across
-Complete tree, filled from left to right
right- greater than
left - less than
-Ologn

HashTable
-one way
-Deterministic
-Collition 1, separate chaining, save both at one address with linked list
           2, linear probing, open addressing - look for open spots
-Hash method O(1)
-get&Set items -  O(1)

Graphes
vertex - node
Edge or connection
weighed or non weighted
directional or bi-directional



